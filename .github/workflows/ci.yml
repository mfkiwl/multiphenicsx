name: multiphenicsx CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 21 * * SUN"
  workflow_dispatch:

jobs:
  test:
    if: >-
      (
        (
          github.event_name == 'schedule'
          && github.repository == 'multiphenics/multiphenicsx'
        ) || (
            github.event_name != 'schedule'
            && !(
              contains(github.event.head_commit.message, '[ci skip]')
              || contains(github.event.head_commit.message, '[skip ci]')
            )
        )
      )
    runs-on: ubuntu-latest
    container: dolfinx/dolfinx
    steps:
      - uses: actions/checkout@v2
      - name: Install multiphenicsx
        run: |
          pip3 -q install --upgrade itkwidgets matplotlib nbconvert Pygments pytest pytest-flake8 pytest-xdist pyvista sympy
          PYVISTA_INIT=$(python3 -c 'import os, pyvista; print(os.path.join(os.path.dirname(pyvista.__file__), "__init__.py"))')
          sed -i "s/os.makedirs(USER_DATA_PATH)/os.makedirs(USER_DATA_PATH, exist_ok=True)/g" ${PYVISTA_INIT}
          python3 setup.py -q install
          python3 -c "import multiphenicsx"
      - name: Run flake8 checks
        run: |
          pytest --flake8 -m flake8
      - name: Run unit tests (serial)
        run: |
          pytest -n auto tests/unit
      - name: Run unit tests (parallel)
        run: |
          mpirun -n 2 pytest tests/unit
      - name: Run tutorials (serial)
        run: |
          pytest -n auto tutorials
      - name: Run tutorials (parallel)
        run: |
          mpirun -n 2 pytest tutorials
      - name: Run mesh generation in tutorials (serial)
        run: |
          pytest -n auto --meshgen tutorials

  docker:
    if: github.repository == 'multiphenics/multiphenicsx' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test]
    env:
      RELEASE_IMAGE: multiphenics/multiphenicsx
    steps:
      - uses: actions/checkout@v2
      - name: Build the docker release image
        run: docker build --pull --target multiphenicsx -t ${RELEASE_IMAGE}:latest -f docker/Dockerfile .
      - name: Try importing the library inside the docker image
        run: docker run -i --rm ${RELEASE_IMAGE} bash -c "python3 -c 'import multiphenicsx'"
      - name: Run unit tests (serial) to verify that the docker image is working
        run: docker run -i --rm ${RELEASE_IMAGE}:latest bash -c "cd multiphenicsx && pytest -n auto tests/unit"
      - name: Build the docker jupyter image
        run: docker build --pull --target jupyter -t ${RELEASE_IMAGE}:jupyter -f docker/Dockerfile .
      - name: Log into the docker registry
        run: docker login -u ${{ secrets.CI_REGISTRY_USER }} -p ${{ secrets.CI_REGISTRY_PASSWORD }}
      - name: Push to the docker registry
        run: |
          docker push ${RELEASE_IMAGE}:latest
          docker push ${RELEASE_IMAGE}:jupyter
